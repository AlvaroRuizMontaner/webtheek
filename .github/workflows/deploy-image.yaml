#name: Build, Push and Deploy a Docker Image
#
#on:
#  push:
#    branches: [master]
#
#permissions:
#  contents: read
#  packages: write
#
#jobs:
#  build-push-deploy-image:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Install system dependencies (for native modules)
#        run: sudo apt-get update && sudo apt-get install -y python3 make g++
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3.3.0
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set lower case owner name
#        run: |
#          OWNER=$(echo "${OWNER_PART}" | cut -d'/' -f1)
#          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
#        env:
#          OWNER_PART: '${{ github.repository }}'
#
#      - name: Debug environment variables
#        run: |
#          echo "NEXT_PUBLIC_STRIPE_API_SECRET: $NEXT_PUBLIC_STRIPE_API_SECRET"
#          echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
#          echo "NEXT_PUBLIC_ENV: $NEXT_PUBLIC_ENV"
#        env:
#          NEXT_PUBLIC_STRIPE_API_SECRET: ${{ secrets.STRIPE_API_KEY }}
#          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
#
#      - name: Build and push Docker image
#        id: push
#        uses: docker/build-push-action@v6.5.0
#        with:
#          context: .
#          push: true
#          tags: ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest
#          build-args: |
#            NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
#            NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
#            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}  # Variable de entorno para el build
#          platforms: linux/amd64  # Forzar arquitectura
#
#      - name: Check build output files
#        run: |
#          echo "Listing build directory..."
#          docker run --rm ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest ls -R /app/.next
#
#      - name: Validate the build (optional)
#      
#        run: |
#          docker run -d --name nextjs-test -p 3000:3000 ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest npm run start
#          sleep 10  # Esperar a que el servidor arranque
#          curl -I http://localhost:3000 || (echo "Validation failed" && exit 1)
#          echo "Server validation successful!"
#          docker stop nextjs-test
#
#      - name: Deploy the app
#        uses: digitalocean/app_action/deploy@v2
#        env:
#          SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#          app_spec_location: .do/app.yaml


name: Build, Push and Deploy a Docker Image

on:
 push:
   branches: [master]

permissions:
  contents: read
  packages: write

jobs:
 build-push-deploy-image:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout repository
       uses: actions/checkout@v4

     - name: Log in to the Container registry
       uses: docker/login-action@v3.3.0
       with:
         registry: ghcr.io
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}

     - name: Set lower case owner name
       run: |
        OWNER=$(echo "${OWNER_PART}" | cut -d'/' -f1)
        echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
      env:
        OWNER_PART: '${{ github.repository }}'

     - name: Build and push Docker image
       id: push
       uses: docker/build-push-action@v6.5.0
       with:
         context: .
         push: true
         tags: ghcr.io/${{ github.repository }}:latest
         build-args: |
          NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
          NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}  # Variable de entorno para el build

     - name: Deploy the app
       uses: digitalocean/app_action/deploy@v2
       env:
         SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
       with:
         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} 
