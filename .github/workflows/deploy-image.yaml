#name: Build, Push and Deploy a Docker Image
#
#on:
#  push:
#    branches: [master]
#
#permissions:
#  contents: read
#  packages: write
#
#jobs:
#  build-push-deploy-image:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Install system dependencies (for native modules)
#        run: sudo apt-get update && sudo apt-get install -y python3 make g++
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3.3.0
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set lower case owner name
#        run: |
#          OWNER=$(echo "${OWNER_PART}" | cut -d'/' -f1)
#          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
#        env:
#          OWNER_PART: '${{ github.repository }}'
#
#      - name: Debug environment variables
#        run: |
#          echo "NEXT_PUBLIC_STRIPE_API_SECRET: $NEXT_PUBLIC_STRIPE_API_SECRET"
#          echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
#          echo "NEXT_PUBLIC_ENV: $NEXT_PUBLIC_ENV"
#        env:
#          NEXT_PUBLIC_STRIPE_API_SECRET: ${{ secrets.STRIPE_API_KEY }}
#          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
#
#      - name: Build and push Docker image
#        id: push
#        uses: docker/build-push-action@v6.5.0
#        with:
#          context: .
#          push: true
#          tags: ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest
#          build-args: |
#            NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
#            NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
#            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}  # Variable de entorno para el build
#          platforms: linux/amd64  # Forzar arquitectura
#
#      - name: Check build output files
#        run: |
#          echo "Listing build directory..."
#          docker run --rm ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest ls -R /app/.next
#
#      - name: Validate the build (optional)
#      
#        run: |
#          docker run -d --name nextjs-test -p 3000:3000 ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest npm run start
#          sleep 10  # Esperar a que el servidor arranque
#          curl -I http://localhost:3000 || (echo "Validation failed" && exit 1)
#          echo "Server validation successful!"
#          docker stop nextjs-test
#
#      - name: Deploy the app
#        uses: digitalocean/app_action/deploy@v2
#        env:
#          SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#          app_spec_location: .do/app.yaml


#git tag 1.x.x && git push origin --tags && git push origin master
#git tag 1.0.5; git push origin --tags; git push origin master

name: Build, Push and Deploy a Docker Image

# Evento que desencadena el workflow: se ejecuta en cada push a la rama "master"
on:
  push:
    branches: [master]

# Permisos necesarios para leer el contenido del repositorio y escribir en el registro de paquetes
permissions:
  contents: read
  packages: write

jobs:
  build-push-deploy-image:
    runs-on: ubuntu-latest # Ejecuta el job en una máquina virtual con Ubuntu

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Esto asegura que se obtengan todos los tags, lo que es necesario para calcular la versión
          

      # Paso 2: Iniciar sesión en el registro de contenedores de DigitalOcean
      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Paso 3: Generar un nuevo tag basado en el último tag existente en Git
      - name: Set version tag
        id: tag
        run: |
          # Obtener el último tag o establecer un valor fallback
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")

          # Dividir el tag en componentes
          MAJOR=$(echo $LAST_TAG | cut -d'.' -f1)
          MINOR=$(echo $LAST_TAG | cut -d'.' -f2)
          PATCH=$(echo $LAST_TAG | cut -d'.' -f3)

          # Incrementar la versión de patch
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="${MAJOR}.${MINOR}.${NEW_PATCH}"

          # Guardar la nueva tag en las variables de entorno de GitHub
          echo "VERSION_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Nueva versión: $NEW_TAG"

      # Paso 4: Mostrar el tag que se está utilizando
      - name: Check image tag
        run: |
          echo "Using image tag: ${{ env.VERSION_TAG }}"


      #- name: Log in to the Container registry
      #  uses: docker/login-action@v3.3.0
      #  with:
      #    registry: ghcr.io
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}

      #Convertir el nombre del tag a minúsculas
      #- name: Set lowercase repository name
      #  run: |
      #    echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV


      # Paso 5: Correr los tests de jest
      - name: Run Jest tests
        run: npm test -- --ci --coverage

      # Paso 6: Instalar Xvfb (necesario para cypress en CD/CI)
      - name: Install Xvfb
        run: sudo apt-get install xvfb

      # Paso 7: Correr los tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm run start
          browser: chrome
          config-file: cypress.config.ts
          headless: true
        env:
          NEXT_PUBLIC_STRIPE_API_SECRET: ${{ secrets.STRIPE_API_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_CYPRESS }}
          NEXT_PUBLIC_ENV: production

      # Paso 8: Construir y subir la imagen Docker al registro de DigitalOcean
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.5.0
        with:
          context: .  # Define el contexto de build como el directorio actual
          push: true  # Subir la imagen al registro después de construirla
          build-args: |  # Se pasan las variables de entorno a la app
            NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
            NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |  # Subir la imagen con dos tags: el tag de versión y el tag "latest"
            registry.digitalocean.com/webtheek-container/app:${{ env.VERSION_TAG }}
            registry.digitalocean.com/webtheek-container/app:latest

      #- name: Deploy the app
      #  uses: digitalocean/app_action/deploy@v2
      #  env:
      #    SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
      #  with:
      #    token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Paso 9: Instalar la herramienta CLI de DigitalOcean (doctl)
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}  # Token de acceso para autenticarse

      # Paso 10: Insertar el tag de la versión en el app spec (app.yaml)
      - name: Insert VERSION_TAG into app.yaml
        run: |
          echo "VERSION_TAG=${{ env.VERSION_TAG }}"
          yq e ".services[].image.tag = \"$VERSION_TAG\"" -i ./.do/app.yaml # Actualizar el campo "tag" en el YAML de app (app spec)
        env:
          VERSION_TAG: ${{ env.VERSION_TAG }}
      
      # Paso 11: Validar el app spec antes del despliegue
      - name: Validate App Spec
        run: |
          doctl apps spec validate ./.do/app.yaml

      # Paso 12: Actualizar la aplicación en DigitalOcean con el nuevo app spec
      - name: Deploy container
        run: |
          doctl apps update 44ee4a7f-a5fd-489b-8491-f704b39211b5 --spec ./.do/app.yaml --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      # Paso 11: Confirmar que las variables están aplicadas correctamente
      #- name: Verify deployment
      #  run: doctl apps describe 44ee4a7f-a5fd-489b-8491-f704b39211b5 --format Spec
