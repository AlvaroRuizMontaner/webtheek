#name: Build, Push and Deploy a Docker Image
#
#on:
#  push:
#    branches: [master]
#
#permissions:
#  contents: read
#  packages: write
#
#jobs:
#  build-push-deploy-image:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Install system dependencies (for native modules)
#        run: sudo apt-get update && sudo apt-get install -y python3 make g++
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v3.3.0
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set lower case owner name
#        run: |
#          OWNER=$(echo "${OWNER_PART}" | cut -d'/' -f1)
#          echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
#        env:
#          OWNER_PART: '${{ github.repository }}'
#
#      - name: Debug environment variables
#        run: |
#          echo "NEXT_PUBLIC_STRIPE_API_SECRET: $NEXT_PUBLIC_STRIPE_API_SECRET"
#          echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
#          echo "NEXT_PUBLIC_ENV: $NEXT_PUBLIC_ENV"
#        env:
#          NEXT_PUBLIC_STRIPE_API_SECRET: ${{ secrets.STRIPE_API_KEY }}
#          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
#
#      - name: Build and push Docker image
#        id: push
#        uses: docker/build-push-action@v6.5.0
#        with:
#          context: .
#          push: true
#          tags: ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest
#          build-args: |
#            NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
#            NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
#            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}  # Variable de entorno para el build
#          platforms: linux/amd64  # Forzar arquitectura
#
#      - name: Check build output files
#        run: |
#          echo "Listing build directory..."
#          docker run --rm ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest ls -R /app/.next
#
#      - name: Validate the build (optional)
#      
#        run: |
#          docker run -d --name nextjs-test -p 3000:3000 ghcr.io/${{ env.OWNER_LC }}/${{ github.event.repository.name }}:latest npm run start
#          sleep 10  # Esperar a que el servidor arranque
#          curl -I http://localhost:3000 || (echo "Validation failed" && exit 1)
#          echo "Server validation successful!"
#          docker stop nextjs-test
#
#      - name: Deploy the app
#        uses: digitalocean/app_action/deploy@v2
#        env:
#          SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#          app_spec_location: .do/app.yaml


name: Build, Push and Deploy a Docker Image

on:
  push:
    branches: [master]

permissions:
  contents: read
  packages: write

jobs:
  build-push-deploy-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}


      - name: Generate metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          tags: |
            type=semver,pattern={{version}}
      - name: Check and clean tag
        run: |
          VERSION_TAG=${{ steps.meta.outputs.tags }}
          # Aquí puedes limpiar caracteres especiales si es necesario
          echo "Using clean tag: $VERSION_TAG"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      #- name: Set version tag
      #  id: tag
      #  run: |
      #    # Obtener el último tag (si existe)
      #    LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
#
      #    # Dividir el tag en componentes: 1, 0, 0
      #    MAJOR=$(echo $LAST_TAG | cut -d'.' -f1)
      #    MINOR=$(echo $LAST_TAG | cut -d'.' -f2)
      #    PATCH=$(echo $LAST_TAG | cut -d'.' -f3)
#
      #    # Incrementar la versión menor (minor)
      #    NEW_PATCH=$((PATCH + 1))
      #    NEW_TAG="${MAJOR}.${MINOR}.${NEW_PATCH}"
#
      #    # Guardar la nueva tag en el entorno
      #    echo "VERSION_TAG=$NEW_TAG" >> $GITHUB_ENV
      #    echo "Nueva versión: $NEW_TAG"

      - name: Check image tag
        run: |
          echo "Using image tag: ${{ env.VERSION_TAG }}"


      #- name: Log in to the Container registry
      #  uses: docker/login-action@v3.3.0
      #  with:
      #    registry: ghcr.io
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}

      #Convertir el nombre del tag a minúsculas
      #- name: Set lowercase repository name
      #  run: |
      #    echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.5.0
        with:
          context: .
          push: true
          build-args: |
            NEXT_PUBLIC_STRIPE_API_SECRET=${{ secrets.STRIPE_API_KEY }}
            NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}  # Variable de entorno para el build
          tags: |
            registry.digitalocean.com/webtheek-container/app:${{ env.VERSION_TAG }}

      #- name: Deploy the app
      #  uses: digitalocean/app_action/deploy@v2
      #  env:
      #    SAMPLE_DIGEST: ${{ steps.push.outputs.digest }}
      #  with:
      #    token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Insert VERSION_TAG into app.yaml
        run: |
          sed -i "s/\${{ env.VERSION_TAG }}/${{ env.VERSION_TAG }}/g" ./.do/app.yaml

      - name: Deploy container
        run: |
          doctl apps update 44ee4a7f-a5fd-489b-8491-f704b39211b5 --spec ./.do/app.yaml --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
